from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from caching_fetcher import *
from issue_data import Issues
from model import (
    Base, Release, Issue, Tag, Bug, Worklog, Thanks,
    Page, SysVar, StatVar, Option, Command, attach
)


def main() -> None:
    # Connect to the MySQL database
    engine = create_engine("mysql+mysqldb://kris:geheim@192.168.1.10/mysql_releases")
    Base.metadata.drop_all(engine)
    Base.metadata.create_all(engine)

    Session = sessionmaker(bind=engine)
    session = Session()

    for version in RELEASE_NOTES:
        major = RELEASE_NOTES[version]
        major.fetch_release_notes()
        print(f"{major}")

        for release in major.releases:
            release_number = f"{release.major}.{release.minor}"
            parsed = Issues(release.releasenotes, release_number)
            print(f"{parsed.rel_no}: {len(parsed.issues)} issues")

            db_release = Release(
                version=parsed.rel_no,
                release_date=parsed.rel_date,
                status=parsed.rel_status
            )

            for parsed_issue in parsed.issues:
                issue = Issue(text=parsed_issue.issuetext)

                attach(session, Tag, parsed_issue.tags, issue.tags, unique_col="tag")
                attach(session, Bug, parsed_issue.bugs, issue.bugs, unique_col="bug")
                attach(session, Worklog, parsed_issue.worklogs, issue.worklogs, unique_col="worklog")
                attach(session, Thanks, parsed_issue.thanks, issue.thanks, unique_col="contributor")
                attach(session, SysVar, parsed_issue.sysvars, issue.sysvars, unique_col="name")
                attach(session, StatVar, parsed_issue.statvars, issue.statvars, unique_col="name")
                attach(session, Option, parsed_issue.options, issue.options, unique_col="name")
                attach(session, Command, parsed_issue.commands, issue.commands, unique_col="name")

                # Page is handled separately due to custom hash logic
                if parsed_issue.pages:
                    for url in set(parsed_issue.pages):
                        try:
                            page = Page(url=url)  # hash auto-generated by @validates
                            page = session.merge(page)
                            issue.pages.append(page)
                        except Exception as e:
                            print(f"Failed to process page URL '{url}': {e}")

                db_release.issues.append(issue)

            session.add(db_release)
            try:
                session.commit()
                print(f"Committed release {db_release.version}")
            except Exception as e:
                session.rollback()
                print(f"Error committing release {db_release.version}: {e}")
