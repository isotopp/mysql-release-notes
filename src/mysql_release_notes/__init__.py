from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from caching_fetcher import *
from issue_data import Issues
from model import (
    Base, Release, Issue, Tag, Bug, Worklog, Thanks,
    Page, SysVar, StatVar, Option, Command
)


def main() -> None:
    # Connect to the MySQL database
    engine = create_engine("mysql+mysqldb://kris:geheim@192.168.1.10/mysql_releases")
    Base.metadata.drop_all(engine)
    Base.metadata.create_all(engine)

    Session = sessionmaker(bind=engine)
    session = Session()

    five_seven = RELEASE_NOTES["5.7"]
    five_seven.fetch_release_notes()

    for release in five_seven.releases:
        parsed = Issues(release.releasenotes)
        print(f"{parsed.rel_no}: {len(parsed.issues)} issues")

        db_release = Release(
            version=parsed.rel_no,
            release_date=parsed.rel_date,
            status=parsed.rel_status
        )

        for parsed_issue in parsed.issues:
            issue = Issue(text=parsed_issue.issuetext)

            def attach(cls, items, rel, unique_col="name"):
                if not items:
                    return
                if isinstance(items, str):
                    items = [items]
                for val in set(items):
                    col = getattr(cls, unique_col)
                    existing = session.query(cls).filter(col == val).first()
                    if existing:
                        rel.append(existing)
                    else:
                        obj = cls(**{unique_col: val})
                        session.add(obj)
                        session.flush()
                        rel.append(obj)

            attach(Tag, parsed_issue.tags, issue.tags, unique_col="tag")
            attach(Bug, parsed_issue.bugs, issue.bugs, unique_col="bug")
            attach(Worklog, parsed_issue.worklogs, issue.worklogs, unique_col="worklog")
            attach(Thanks, parsed_issue.thanks, issue.thanks, unique_col="contributor")
            attach(SysVar, parsed_issue.sysvars, issue.sysvars, unique_col="name")
            attach(StatVar, parsed_issue.statvars, issue.statvars, unique_col="name")
            attach(Option, parsed_issue.options, issue.options, unique_col="name")
            attach(Command, parsed_issue.commands, issue.commands, unique_col="name")

            # Page is handled separately due to custom hash logic
            if parsed_issue.pages:
                for url in set(parsed_issue.pages):
                    try:
                        page = Page(url=url)  # hash auto-generated by @validates
                        page = session.merge(page)
                        issue.pages.append(page)
                    except Exception as e:
                        print(f"Failed to process page URL '{url}': {e}")

            db_release.issues.append(issue)

        session.add(db_release)
        try:
            session.commit()
            print(f"Committed release {db_release.version}")
        except Exception as e:
            session.rollback()
            print(f"Error committing release {db_release.version}: {e}")
